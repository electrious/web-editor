// Generated by purs version 0.13.6
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Compactable = require("../Data.Compactable/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Filterable = require("../Data.Filterable/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Effect_Unsafe = require("../Effect.Unsafe/index.js");
var FRP_Event_Class = require("../FRP.Event.Class/index.js");
var Unsafe_Reference = require("../Unsafe.Reference/index.js");
var Event = function (x) {
    return x;
};
var subscribe = function (v) {
    return function (k) {
        return v((function () {
            var $45 = Data_Functor["void"](Effect.functorEffect);
            return function ($46) {
                return $45(k($46));
            };
        })());
    };
};
var sampleOn = function (v) {
    return function (v1) {
        return function (k) {
            return function __do() {
                var latest = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                var c1 = v(function (a) {
                    return Effect_Ref.write(new Data_Maybe.Just(a))(latest);
                })();
                var c2 = v1(function (f) {
                    return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latest))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($47) {
                        return k(f($47));
                    }));
                })();
                return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
            };
        };
    };
};
var makeEvent = Event;
var keepLatest = function (v) {
    return function (k) {
        return function __do() {
            var cancelInner = Effect_Ref["new"](Data_Maybe.Nothing.value)();
            var cancelOuter = v(function (inner) {
                return function __do() {
                    Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
                    var c = subscribe(inner)(k)();
                    return Effect_Ref.write(new Data_Maybe.Just(c))(cancelInner)();
                };
            })();
            return function __do() {
                Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
                return cancelOuter();
            };
        };
    };
};
var functorEvent = new Data_Functor.Functor(function (f) {
    return function (v) {
        return function (k) {
            return v(function ($48) {
                return k(f($48));
            });
        };
    };
});
var fold = function (f) {
    return function (v) {
        return function (b) {
            return function (k) {
                return function __do() {
                    var result = Effect_Ref["new"](b)();
                    return v(function (a) {
                        return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.modify(f(a))(result))(k);
                    })();
                };
            };
        };
    };
};
var filter = function (p) {
    return function (v) {
        return function (k) {
            return v(function (a) {
                var $34 = p(a);
                if ($34) {
                    return k(a);
                };
                return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
            });
        };
    };
};
var create = function __do() {
    var subscribers = Effect_Ref["new"]([  ])();
    return {
        event: function (k) {
            return function __do() {
                Effect_Ref.modify(function (v) {
                    return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)([ k ]);
                })(subscribers)();
                return function __do() {
                    Effect_Ref.modify(Data_Array.deleteBy(Unsafe_Reference.unsafeRefEq)(k))(subscribers)();
                    return Data_Unit.unit;
                };
            };
        },
        push: function (a) {
            return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(subscribers))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(function (k) {
                return k(a);
            }));
        }
    };
};
var fix = function (f) {
    var v = Effect_Unsafe.unsafePerformEffect(create);
    var v1 = f(v.event);
    return function (k) {
        return function __do() {
            var c1 = subscribe(v1.input)(v.push)();
            var c2 = subscribe(v1.output)(k)();
            return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
        };
    };
};
var compactableEvent = new Data_Compactable.Compactable(function (xs) {
    return Data_Functor.map(functorEvent)(function (x) {
        return Data_Maybe.fromJust()(x);
    })(filter(Data_Maybe.isJust)(xs));
}, function (xs) {
    return {
        left: Data_Functor.map(functorEvent)(Data_Either.fromLeft())(filter(Data_Either.isLeft)(xs)),
        right: Data_Functor.map(functorEvent)(Data_Either.fromRight())(filter(Data_Either.isRight)(xs))
    };
});
var filterableEvent = new Data_Filterable.Filterable(function () {
    return compactableEvent;
}, function () {
    return functorEvent;
}, filter, function (f) {
    var $49 = Data_Functor.map(functorEvent)(function (x) {
        return Data_Maybe.fromJust()(x);
    });
    var $50 = filter(Data_Maybe.isJust);
    var $51 = Data_Functor.map(functorEvent)(f);
    return function ($52) {
        return $49($50($51($52)));
    };
}, function (p) {
    return function (xs) {
        return {
            yes: filter(p)(xs),
            no: filter((function () {
                var $53 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                return function ($54) {
                    return $53(p($54));
                };
            })())(xs)
        };
    };
}, function (f) {
    return function (xs) {
        return {
            left: Data_Filterable.filterMap(filterableEvent)((function () {
                var $55 = Data_Either.either(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value));
                return function ($56) {
                    return $55(f($56));
                };
            })())(xs),
            right: Data_Filterable.filterMap(filterableEvent)(function ($57) {
                return Data_Either.hush(f($57));
            })(xs)
        };
    };
});
var applyEvent = new Control_Apply.Apply(function () {
    return functorEvent;
}, function (v) {
    return function (v1) {
        return function (k) {
            return function __do() {
                var latestA = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                var latestB = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                var c1 = v(function (a) {
                    return function __do() {
                        Effect_Ref.write(new Data_Maybe.Just(a))(latestA)();
                        return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latestB))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($58) {
                            return k(a($58));
                        }))();
                    };
                })();
                var c2 = v1(function (b) {
                    return function __do() {
                        Effect_Ref.write(new Data_Maybe.Just(b))(latestB)();
                        return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latestA))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($59) {
                            return k((function (v2) {
                                return v2(b);
                            })($59));
                        }))();
                    };
                })();
                return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
            };
        };
    };
});
var semigroupEvent = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyEvent)(Data_Semigroup.append(dictSemigroup)));
};
var applicativeEvent = new Control_Applicative.Applicative(function () {
    return applyEvent;
}, function (a) {
    return function (k) {
        return function __do() {
            k(a)();
            return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
        };
    };
});
var monoidEvent = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupEvent(dictMonoid.Semigroup0());
    }, Control_Applicative.pure(applicativeEvent)(Data_Monoid.mempty(dictMonoid)));
};
var altEvent = new Control_Alt.Alt(function () {
    return functorEvent;
}, function (v) {
    return function (v1) {
        return function (k) {
            return function __do() {
                var c1 = v(k)();
                var c2 = v1(k)();
                return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
            };
        };
    };
});
var plusEvent = new Control_Plus.Plus(function () {
    return altEvent;
}, function (v) {
    return Control_Applicative.pure(Effect.applicativeEffect)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
});
var alternativeEvent = new Control_Alternative.Alternative(function () {
    return applicativeEvent;
}, function () {
    return plusEvent;
});
var eventIsEvent = new FRP_Event_Class.IsEvent(function () {
    return alternativeEvent;
}, function () {
    return filterableEvent;
}, fix, fold, keepLatest, sampleOn);
module.exports = {
    create: create,
    makeEvent: makeEvent,
    subscribe: subscribe,
    functorEvent: functorEvent,
    compactableEvent: compactableEvent,
    filterableEvent: filterableEvent,
    applyEvent: applyEvent,
    applicativeEvent: applicativeEvent,
    altEvent: altEvent,
    plusEvent: plusEvent,
    alternativeEvent: alternativeEvent,
    semigroupEvent: semigroupEvent,
    monoidEvent: monoidEvent,
    eventIsEvent: eventIsEvent
};
