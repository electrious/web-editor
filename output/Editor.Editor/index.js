// Generated by purs version 0.13.6
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Editor_House = require("../Editor.House/index.js");
var Editor_Input = require("../Editor.Input/index.js");
var Editor_RoofManager = require("../Editor.RoofManager/index.js");
var Editor_SceneEvent = require("../Editor.SceneEvent/index.js");
var Effect = require("../Effect/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var FRP_Event = require("../FRP.Event/index.js");
var FRP_Event_Class = require("../FRP.Event.Class/index.js");
var Models_RoofPlate = require("../Models.RoofPlate/index.js");
var Three_Core_Camera = require("../Three.Core.Camera/index.js");
var Three_Core_Light = require("../Three.Core.Light/index.js");
var Three_Core_Object3D = require("../Three.Core.Object3D/index.js");
var Three_Core_Scene = require("../Three.Core.Scene/index.js");
var Three_Core_WebGLRenderer = require("../Three.Core.WebGLRenderer/index.js");
var Three_Math_Vector = require("../Three.Math.Vector/index.js");
var Util = require("../Util/index.js");
var Web_DOM_Element = require("../Web.DOM.Element/index.js");
var Web_DOM_Node = require("../Web.DOM.Node/index.js");
var Web_HTML = require("../Web.HTML/index.js");
var Web_HTML_Window = require("../Web.HTML.Window/index.js");
var Web_UIEvent_WheelEvent = require("../Web.UIEvent.WheelEvent/index.js");
var rotateContentWithDrag = function (obj) {
    return function (drag) {
        return function __do() {
            Three_Core_Object3D.rotateZ(drag.deltaX / 360.0)(obj)();
            return Three_Core_Object3D.rotateOnWorldAxis(Three_Math_Vector.mkVec3(1.0)(0.0)(0.0))(drag.deltaY / 360.0)(obj)();
        };
    };
};
var renderLoop = function (es) {
    return function (w) {
        return function __do() {
            Web_HTML_Window.requestAnimationFrame(renderLoop(es)(w))(w)();
            return es.render();
        };
    };
};
var moveWithShiftDrag = function (obj) {
    return function (drag) {
        return function (scale) {
            if (!Three_Core_Object3D.hasParent(obj)) {
                return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
            };
            if (Data_Boolean.otherwise) {
                var vec = Three_Math_Vector.mkVec3(drag.deltaX)(-drag.deltaY)(0.0);
                var p = Three_Core_Object3D.parent(obj);
                return function __do() {
                    var lVec = Three_Core_Object3D.worldToLocal(vec)(p)();
                    Three_Core_Object3D.translateX((Three_Math_Vector.vecX(Three_Math_Vector.hasXVec3)(lVec) * scale) / 10.0)(obj)();
                    return Three_Core_Object3D.translateY((Three_Math_Vector.vecY(Three_Math_Vector.hasYVec3)(lVec) * scale) / 10.0)(obj)();
                };
            };
            throw new Error("Failed pattern match at Editor.Editor (line 69, column 1 - line 69, column 80): " + [ obj.constructor.name, drag.constructor.name, scale.constructor.name ]);
        };
    };
};
var capVal = function (bot) {
    return function (top) {
        return function (v) {
            if (v < bot) {
                return bot;
            };
            if (v > top) {
                return top;
            };
            if (Data_Boolean.otherwise) {
                return v;
            };
            throw new Error("Failed pattern match at Editor.Editor (line 49, column 1 - line 49, column 47): " + [ bot.constructor.name, top.constructor.name, v.constructor.name ]);
        };
    };
};
var zoomCamera = function (camera) {
    return function (zoom) {
        var pos = Three_Core_Object3D.position(camera);
        var curDist = Three_Math_Vector.length(Three_Math_Vector.vecVec3)(pos);
        var newDist = capVal(5.0)(500.0)(curDist + zoom);
        var newPos = Three_Math_Vector.multiplyScalar(Three_Math_Vector.vecVec3)(Three_Math_Vector.normal(Three_Math_Vector.vecVec3)(pos))(newDist);
        return function __do() {
            Three_Core_Object3D.setPosition(newPos)(camera)();
            return newDist;
        };
    };
};
var createScene = function (width) {
    return function (height) {
        return function (elem) {
            return function __do() {
                var scene = Three_Core_Scene.mkScene();
                var camera = Three_Core_Camera.mkPerspectiveCamera(45.0)(Data_Int.toNumber(width) / Data_Int.toNumber(height))(0.1)(1000.0)();
                var renderer = Three_Core_WebGLRenderer.mkWebGLRenderer();
                var resized = function (s) {
                    return function __do() {
                        Three_Core_Camera.setAspect(Data_Int.toNumber(s.width) / Data_Int.toNumber(s.height))(camera)();
                        Three_Core_Camera.updateProjectionMatrix(camera)();
                        return Three_Core_WebGLRenderer.setSize(s.width)(s.height)(renderer)();
                    };
                };
                var v = FRP_Event.create();
                var d1 = FRP_Event.subscribe(v.event)(resized)();
                Web_DOM_Node.appendChild(Web_DOM_Element.toNode(Three_Core_WebGLRenderer.domElement(renderer)))(Web_DOM_Element.toNode(elem))();
                Three_Core_Object3D.setPosition(Three_Math_Vector.mkVec3(0.0)(-50.0)(50.0))(camera)();
                Three_Core_Object3D.lookAt(Three_Math_Vector.mkVec3(0.0)(0.0)(0.0))(camera)();
                var cameraDefDist = Three_Math_Vector.length(Three_Math_Vector.vecVec3)(Three_Core_Object3D.position(camera));
                var ambientLight = Three_Core_Light.mkAmbientLight(16777215)();
                Three_Core_Object3D.setName("ambient-light")(ambientLight)();
                Three_Core_Object3D.add(ambientLight)(scene)();
                var dirLight = Three_Core_Light.mkDirectionalLight(15658734)(0.5)();
                Three_Core_Object3D.setName("directional-light")(dirLight)();
                Three_Core_Object3D.setPosition(Three_Math_Vector.mkVec3(100.0)(0.0)(100.0))(dirLight)();
                Three_Core_Object3D.add(dirLight)(scene)();
                var rotWrapper = Three_Core_Object3D.mkObject3D();
                Three_Core_Object3D.setName("rotate-wrapper")(rotWrapper)();
                Three_Core_Object3D.add(rotWrapper)(scene)();
                var content = Three_Core_Object3D.mkObject3D();
                Three_Core_Object3D.setName("scene-content")(content)();
                Three_Core_Object3D.add(content)(rotWrapper)();
                var renderFunc = Three_Core_WebGLRenderer.render(scene)(camera)(renderer);
                var inputEvts = Editor_Input.setupInput(elem);
                var newDistEvt = Util.performEvent(Data_Functor.map(FRP_Event.functorEvent)((function () {
                    var $11 = zoomCamera(camera);
                    return function ($12) {
                        return $11(Web_UIEvent_WheelEvent.deltaY($12));
                    };
                })())(inputEvts.zoomed));
                var scaleEvt = Data_Functor.map(FRP_Event.functorEvent)(function (d) {
                    return d / cameraDefDist;
                })(newDistEvt);
                var addContentFunc = function (c) {
                    return Three_Core_Object3D.add(c)(content);
                };
                var rcs = Editor_SceneEvent.setupRaycasting(camera)(scene)(inputEvts)(v.event)();
                var d2 = FRP_Event.subscribe(rcs.dragEvent)(rotateContentWithDrag(rotWrapper))();
                var shiftDragEvt = Util.performEvent(FRP_Event_Class.sampleOn(FRP_Event.eventIsEvent)(scaleEvt)(Data_Functor.map(FRP_Event.functorEvent)(moveWithShiftDrag(content))(inputEvts.shiftDragged)));
                var d3 = FRP_Event.subscribe(shiftDragEvt)(function (v1) {
                    return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                })();
                v.push({
                    width: width,
                    height: height
                })();
                return {
                    scene: scene,
                    camera: camera,
                    renderer: renderer,
                    size: v.event,
                    render: renderFunc,
                    resize: function (w) {
                        return function (h) {
                            return v.push({
                                width: w,
                                height: h
                            });
                        };
                    },
                    addContent: addContentFunc,
                    dispose: Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableArray)([ d1, d2, d3, Three_Core_Scene.disposeScene(scene), rcs.dispose ])
                };
            };
        };
    };
};
var createEditor = function (width) {
    return function (height) {
        return function (elem) {
            return function __do() {
                var es = createScene(width)(height)(elem)();
                var w = Web_HTML.window();
                var disposables = Effect_Ref["new"]([ es.dispose ])();
                var addDisposable = function (d) {
                    return Effect_Ref.modify(Data_Array.cons(d))(disposables);
                };
                renderLoop(es)(w)();
                var loadHouseFunc = function (url) {
                    return function (leadId) {
                        return function (roofs) {
                            return function (roofEdited) {
                                var f = function (hmd) {
                                    return function __do() {
                                        es.addContent(hmd.wrapper)();
                                        var mgr = Editor_RoofManager.createRoofManager(hmd)(Data_Functor.map(Data_Functor.functorArray)(Models_RoofPlate.fromJSRoofPlate)(roofs))();
                                        es.addContent(mgr.roofWrapper)();
                                        addDisposable(mgr.disposable)();
                                        var d = FRP_Event.subscribe(mgr.editedRoofs)(roofEdited)();
                                        return addDisposable(d)();
                                    };
                                };
                                return function __do() {
                                    var e = Editor_House.loadHouse(url)(leadId)();
                                    var d = FRP_Event.subscribe(e)(f)();
                                    addDisposable(d)();
                                    return Data_Unit.unit;
                                };
                            };
                        };
                    };
                };
                var disposeFunc = function __do() {
                    var l = Effect_Ref.read(disposables)();
                    Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(l)();
                    return Effect_Ref.write([  ])(disposables)();
                };
                return {
                    resize: es.resize,
                    dispose: disposeFunc,
                    loadHouse: loadHouseFunc
                };
            };
        };
    };
};
module.exports = {
    createEditor: createEditor
};
