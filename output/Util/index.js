// Generated by purs version 0.13.6
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Filterable = require("../Data.Filterable/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Foreign_EasyFFI = require("../Data.Foreign.EasyFFI/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Effect_Now = require("../Effect.Now/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Effect_Timer = require("../Effect.Timer/index.js");
var Effect_Unsafe = require("../Effect.Unsafe/index.js");
var FRP_Event = require("../FRP.Event/index.js");
var FRP_Event_Class = require("../FRP.Event.Class/index.js");
var skip = function (n) {
    return function (evt) {
        return FRP_Event.makeEvent(function (k) {
            return function __do() {
                var fired = Effect_Ref["new"](0)();
                return FRP_Event.subscribe(evt)(function (v) {
                    return function __do() {
                        var newCount = Effect_Ref.modify(Data_Semiring.add(Data_Semiring.semiringInt)(1))(fired)();
                        var $7 = newCount > n;
                        if ($7) {
                            return k(v)();
                        };
                        return Data_Unit.unit;
                    };
                })();
            };
        });
    };
};
var multicast = function (evt) {
    return Effect_Unsafe.unsafePerformEffect(function __do() {
        var v = FRP_Event.create();
        var dispose = FRP_Event.subscribe(evt)(v.push)();
        return v.event;
    });
};
var performEvent = function (evt) {
    return multicast(FRP_Event.makeEvent(function (k) {
        return FRP_Event.subscribe(evt)(function (act) {
            return Control_Bind.bind(Effect.bindEffect)(act)(k);
        });
    }));
};
var mergeArray = function (arr) {
    return FRP_Event.makeEvent(function (k) {
        var initVals = Data_Array.replicate(Data_Array.length(arr))(Data_Maybe.Nothing.value);
        return function __do() {
            var values = Effect_Ref["new"](initVals)();
            var newValFunc = function (i) {
                return function (val) {
                    return function __do() {
                        var newVals = Effect_Ref.modify((function () {
                            var $21 = Data_Maybe.fromMaybe([  ]);
                            var $22 = Data_Array.updateAt(i)(new Data_Maybe.Just(val));
                            return function ($23) {
                                return $21($22($23));
                            };
                        })())(values)();
                        var $11 = Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Maybe.isJust)(newVals);
                        if ($11) {
                            return k(Data_Functor.map(Data_Functor.functorArray)(Data_Maybe.fromJust())(newVals))();
                        };
                        return Data_Unit.unit;
                    };
                };
            };
            var disposables = Data_TraversableWithIndex.traverseWithIndex(Data_TraversableWithIndex.traversableWithIndexArray)(Effect.applicativeEffect)(function (i) {
                return function (e) {
                    return FRP_Event.subscribe(e)(newValFunc(i));
                };
            })(arr)();
            return Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(disposables);
        };
    });
};
var fpi = Data_Foreign_EasyFFI.unsafeForeignProcedure;
var foldWithDef = function (f) {
    return function (e) {
        return function (b) {
            return FRP_Event.makeEvent(function (k) {
                return function __do() {
                    var result = Effect_Ref["new"](b)();
                    var timer = Effect_Timer.setTimeout(10)(k(b))();
                    var dispose = FRP_Event.subscribe(e)(function (a) {
                        return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.modify(f(a))(result))(k);
                    })();
                    return Control_Apply.applySecond(Effect.applyEffect)(Effect_Timer.clearTimeout(timer))(dispose);
                };
            });
        };
    };
};
var foldEffect = function (act) {
    return function (e) {
        return function (b) {
            return FRP_Event.makeEvent(function (k) {
                return function __do() {
                    var result = Effect_Ref["new"](b)();
                    return FRP_Event.subscribe(e)(function (a) {
                        return function __do() {
                            var curB = Effect_Ref.read(result)();
                            var newB = act(a)(curB)();
                            Effect_Ref.write(newB)(result)();
                            return k(newB)();
                        };
                    })();
                };
            });
        };
    };
};
var ffi = Data_Foreign_EasyFFI.unsafeForeignFunction;
var distinct = function (dictEq) {
    return function (evt) {
        var isDiff = function (v) {
            return Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(v.last)(new Data_Maybe.Just(v.now));
        };
        var getNow = function (v) {
            return v.now;
        };
        return Data_Functor.map(FRP_Event.functorEvent)(getNow)(Data_Filterable.filter(FRP_Event.filterableEvent)(isDiff)(FRP_Event_Class.withLast(FRP_Event.eventIsEvent)(evt)));
    };
};
var delay = function (n) {
    return function (evt) {
        return FRP_Event.makeEvent(function (k) {
            return FRP_Event.subscribe(evt)(function (v) {
                return Effect_Timer.setTimeout(n)(k(v));
            });
        });
    };
};
var debugWith = function (f) {
    return function (evt) {
        var g = function (v) {
            return Control_Apply.applySecond(Effect.applyEffect)(f(v))(Control_Applicative.pure(Effect.applicativeEffect)(v));
        };
        return performEvent(Data_Functor.map(FRP_Event.functorEvent)(g)(evt));
    };
};
var debug = function (dictShow) {
    return function (evt) {
        var f = function (v) {
            return Control_Apply.applySecond(Effect.applyEffect)(Effect_Console.logShow(dictShow)(v))(Control_Applicative.pure(Effect.applicativeEffect)(v));
        };
        return performEvent(Data_Functor.map(FRP_Event.functorEvent)(f)(evt));
    };
};
var debounce = function (v) {
    return function (evt) {
        return FRP_Event.makeEvent(function (k) {
            return function __do() {
                var timer = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                return FRP_Event.subscribe(evt)(function (v1) {
                    return function __do() {
                        var tf = Effect_Ref.read(timer)();
                        (function () {
                            if (tf instanceof Data_Maybe.Just) {
                                return Effect_Timer.clearTimeout(tf.value0)();
                            };
                            if (tf instanceof Data_Maybe.Nothing) {
                                return Data_Unit.unit;
                            };
                            throw new Error("Failed pattern match at Util (line 50, column 9 - line 52, column 33): " + [ tf.constructor.name ]);
                        })();
                        var newT = Effect_Timer.setTimeout(Data_Maybe.fromMaybe(1)(Data_Int.fromNumber(v)))(k(v1))();
                        return Effect_Ref.write(new Data_Maybe.Just(newT))(timer)();
                    };
                })();
            };
        });
    };
};
var after = function (n) {
    return FRP_Event.makeEvent(function (k) {
        return function __do() {
            var id = Effect_Timer.setTimeout(n)(function __do() {
                var time = Effect_Now.now();
                return k(time)();
            })();
            return Effect_Timer.clearTimeout(id);
        };
    });
};
module.exports = {
    ffi: ffi,
    fpi: fpi,
    after: after,
    delay: delay,
    debounce: debounce,
    skip: skip,
    distinct: distinct,
    foldWithDef: foldWithDef,
    mergeArray: mergeArray,
    performEvent: performEvent,
    foldEffect: foldEffect,
    multicast: multicast,
    debug: debug,
    debugWith: debugWith
};
