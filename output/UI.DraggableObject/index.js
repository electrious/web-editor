// Generated by purs version 0.13.6
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Custom_Mesh = require("../Custom.Mesh/index.js");
var Data_Filterable = require("../Data.Filterable/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Editor_SceneEvent = require("../Editor.SceneEvent/index.js");
var Effect = require("../Effect/index.js");
var Effect_Unsafe = require("../Effect.Unsafe/index.js");
var FRP_Event = require("../FRP.Event/index.js");
var FRP_Event_Extra = require("../FRP.Event.Extra/index.js");
var Three_Core_Geometry = require("../Three.Core.Geometry/index.js");
var Three_Core_Material = require("../Three.Core.Material/index.js");
var Three_Core_Object3D = require("../Three.Core.Object3D/index.js");
var Three_Math_Vector = require("../Three.Math.Vector/index.js");
var invisibleMaterial = Effect_Unsafe.unsafePerformEffect(function __do() {
    var mat = Three_Core_Material.mkMeshBasicMaterial(0)();
    Three_Core_Material.setTransparent(true)(mat)();
    Three_Core_Material.setOpacity(1.0e-3)(mat)();
    return mat;
});
var defMaterial = Effect_Unsafe.unsafePerformEffect(Three_Core_Material.mkMeshBasicMaterial(16720418));
var createVisibleObject = function (geo) {
    return function (mat) {
        return function __do() {
            var cm = Three_Core_Geometry.mkCircleGeometry(0.5)(32)();
            var m = Data_Maybe.fromMaybe(defMaterial)(mat);
            var g = Data_Maybe.fromMaybe(cm)(geo);
            return Custom_Mesh.mkTapDragMesh(g)(m)();
        };
    };
};
var createInvisibleCircle = function __do() {
    var geo = Three_Core_Geometry.mkCircleGeometry(10.0)(32)();
    return Custom_Mesh.mkDraggableMesh(geo)(invisibleMaterial)();
};
var createDraggableObject = function (active) {
    return function (index) {
        return function (position) {
            return function (customGeo) {
                return function (customMat) {
                    return function __do() {
                        var dragObj = Three_Core_Object3D.mkObject3D();
                        Three_Core_Object3D.setName("drag-object")(dragObj)();
                        var mesh = createVisibleObject(customGeo)(customMat)();
                        var defPosition = Three_Math_Vector.mkVec3(Three_Math_Vector.vecX(Three_Math_Vector.hasXVec2)(position))(Three_Math_Vector.vecY(Three_Math_Vector.hasYVec2)(position))(0.1);
                        Three_Core_Object3D.setPosition(defPosition)(mesh.mesh)();
                        Three_Core_Object3D.setVisible(false)(mesh.mesh)();
                        Three_Core_Object3D.add(mesh.mesh)(dragObj)();
                        var invCircle = createInvisibleCircle();
                        Three_Core_Object3D.setPosition(defPosition)(invCircle.mesh)();
                        Three_Core_Object3D.setVisible(false)(invCircle.mesh)();
                        Three_Core_Object3D.setRenderOrder(10)(invCircle.mesh)();
                        Three_Core_Object3D.add(invCircle.mesh)(dragObj)();
                        var disp1 = FRP_Event.subscribe(active)(Data_Function.flip(Three_Core_Object3D.setVisible)(mesh.mesh))();
                        var dragEvts = FRP_Event_Extra.multicast(Control_Alt.alt(FRP_Event.altEvent)(mesh.dragged)(invCircle.dragged));
                        var evts = FRP_Event_Extra.multicast(Custom_Mesh.validateDrag(dragEvts));
                        var endEvt = Data_Filterable.filter(FRP_Event.filterableEvent)(Editor_SceneEvent.isDragEnd)(evts);
                        var startEvt = Data_Filterable.filter(FRP_Event.filterableEvent)(Editor_SceneEvent.isDragStart)(evts);
                        var dragging = Control_Alt.alt(FRP_Event.altEvent)(Data_Functor.map(FRP_Event.functorEvent)(Data_Function["const"](true))(startEvt))(Data_Functor.map(FRP_Event.functorEvent)(Data_Function["const"](false))(endEvt));
                        var disp2 = FRP_Event.subscribe(dragging)(Data_Function.flip(Three_Core_Object3D.setVisible)(invCircle.mesh))();
                        var toLocal = function (v) {
                            var $0 = Three_Core_Object3D.hasParent(dragObj);
                            if ($0) {
                                return Data_Functor.map(Effect.functorEffect)(Data_Maybe.Just.create)(Three_Core_Object3D.worldToLocal(v)(Three_Core_Object3D.parent(dragObj)));
                            };
                            return Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value);
                        };
                        var delta = Custom_Mesh.calcDragDelta(toLocal)(evts);
                        var zeroZ = function (v) {
                            return Three_Math_Vector.mkVec3(Three_Math_Vector.vecX(Three_Math_Vector.hasXVec3)(v))(Three_Math_Vector.vecY(Three_Math_Vector.hasYVec3)(v))(0.0);
                        };
                        var updatePos = function (d) {
                            return function (lastPos) {
                                return Three_Math_Vector.add(Three_Math_Vector.vecVec3)(lastPos)(zeroZ(d));
                            };
                        };
                        var newPos = FRP_Event_Extra.multicast(FRP_Event_Extra.foldWithDef(updatePos)(delta)(defPosition));
                        var disp3 = FRP_Event.subscribe(newPos)(function (p) {
                            return function __do() {
                                Three_Core_Object3D.setPosition(p)(mesh.mesh)();
                                return Three_Core_Object3D.setPosition(p)(invCircle.mesh)();
                            };
                        })();
                        return {
                            object: dragObj,
                            tapped: Data_Functor.map(FRP_Event.functorEvent)(Data_Function["const"](index))(mesh.tapped),
                            position: newPos,
                            isDragging: FRP_Event_Extra.multicast(dragging),
                            disposable: Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableArray)([ disp1, disp2, disp3 ])
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    defMaterial: defMaterial,
    invisibleMaterial: invisibleMaterial,
    createVisibleObject: createVisibleObject,
    createInvisibleCircle: createInvisibleCircle,
    createDraggableObject: createDraggableObject
};
