// Generated by purs version 0.13.6
"use strict";
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Set = require("../Data.Set/index.js");
var Effect = require("../Effect/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var FRP_Event = require("../FRP.Event/index.js");
var Web_Event_Event = require("../Web.Event.Event/index.js");
var Web_Event_EventTarget = require("../Web.Event.EventTarget/index.js");
var Web_HTML = require("../Web.HTML/index.js");
var Web_HTML_Window = require("../Web.HTML.Window/index.js");
var Web_UIEvent_KeyboardEvent = require("../Web.UIEvent.KeyboardEvent/index.js");
var Keyboard = function (x) {
    return x;
};
var withKeys = function (v) {
    return function (e) {
        return FRP_Event.makeEvent(function (k) {
            return FRP_Event.subscribe(e)(function (value) {
                return function __do() {
                    var keysValue = Effect_Ref.read(v.keys)();
                    return k({
                        value: value,
                        keys: keysValue
                    })();
                };
            });
        });
    };
};
var up = FRP_Event.makeEvent(function (k) {
    return function __do() {
        var target = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
        var keyUpListener = Web_Event_EventTarget.eventListener(function (e) {
            return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (ke) {
                return k(Web_UIEvent_KeyboardEvent.code(ke));
            })(Web_UIEvent_KeyboardEvent.fromEvent(e));
        })();
        Web_Event_EventTarget.addEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("keyup"))(keyUpListener)(false)(target)();
        return Web_Event_EventTarget.removeEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("keyup"))(keyUpListener)(false)(target);
    };
});
var getKeyboard = function __do() {
    var keys = Effect_Ref["new"](Data_Set.empty)();
    var target = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
    var keyDownListener = Web_Event_EventTarget.eventListener(function (e) {
        return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (ke) {
            return Effect_Ref.modify(Data_Set.insert(Data_Ord.ordString)(Web_UIEvent_KeyboardEvent.code(ke)))(keys);
        })(Web_UIEvent_KeyboardEvent.fromEvent(e));
    })();
    var keyUpListener = Web_Event_EventTarget.eventListener(function (e) {
        return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (ke) {
            return Effect_Ref.modify(Data_Set["delete"](Data_Ord.ordString)(Web_UIEvent_KeyboardEvent.code(ke)))(keys);
        })(Web_UIEvent_KeyboardEvent.fromEvent(e));
    })();
    Web_Event_EventTarget.addEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("keydown"))(keyDownListener)(false)(target)();
    Web_Event_EventTarget.addEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("keyup"))(keyUpListener)(false)(target)();
    var dispose = function __do() {
        Web_Event_EventTarget.removeEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("keydown"))(keyDownListener)(false)(target)();
        return Web_Event_EventTarget.removeEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("keyup"))(keyUpListener)(false)(target)();
    };
    return {
        keys: keys,
        dispose: dispose
    };
};
var down = FRP_Event.makeEvent(function (k) {
    return function __do() {
        var target = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
        var keyDownListener = Web_Event_EventTarget.eventListener(function (e) {
            return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (ke) {
                return k(Web_UIEvent_KeyboardEvent.code(ke));
            })(Web_UIEvent_KeyboardEvent.fromEvent(e));
        })();
        Web_Event_EventTarget.addEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("keydown"))(keyDownListener)(false)(target)();
        return Web_Event_EventTarget.removeEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("keydown"))(keyDownListener)(false)(target);
    };
});
var disposeKeyboard = function (v) {
    return v.dispose;
};
module.exports = {
    getKeyboard: getKeyboard,
    disposeKeyboard: disposeKeyboard,
    down: down,
    up: up,
    withKeys: withKeys
};
