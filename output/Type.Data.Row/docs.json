{"reExports":[],"name":"Type.Data.Row","comments":null,"declarations":[{"children":[{"comments":null,"title":"RProxy","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"A proxy data type whose type parameter is a type of kind `# Type` (a row\nof types).\n\nCommonly used for specialising a function with a quantified type.\nFor example, suppose we have an identity function for records of type:\n```purescript\nrecordIdentity :: forall row . RProxy row -> Record row -> Record row\nrecordIdentity _ rec = rec\n```\nThen applying this function to an `RProxy` with a specialised type\nallows us to specify a concrete type for `row`:\n```purescript\n:t recordIdentity (RProxy :: RProxy ( x :: Int, y :: Int ))\n{ x :: Int, y :: Int } -> { x :: Int, y :: Int }\n```\nHere `row` has been specialised to `( x :: Int, y :: Int )`.\n","title":"RProxy","info":{"declType":"data","dataDeclType":"data","typeArguments":[["row",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]]},"sourceSpan":{"start":[19,1],"name":".spago/prelude/v4.1.1/src/Type/Data/Row.purs","end":[20,11]}}]}