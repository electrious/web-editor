// Generated by purs version 0.13.6
"use strict";
var Algorithm_PointInPolygon = require("../Algorithm.PointInPolygon/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Math_Angle = require("../Math.Angle/index.js");
var Models_RoofPlate = require("../Models.RoofPlate/index.js");
var Three_Core_Face3 = require("../Three.Core.Face3/index.js");
var Three_Core_Object3D = require("../Three.Core.Object3D/index.js");
var Three_Math_Vector = require("../Three.Math.Vector/index.js");
var couldBeRoof = function (house) {
    return function (roofs) {
        return function (e) {
            var roofPoly = Data_Functor.map(Data_Functor.functorArray)(Models_RoofPlate.getRoofPolygon)(roofs);
            return function __do() {
                var localPoint = Three_Core_Object3D.worldToLocal(e.point)(house)();
                var up = Three_Math_Vector.mkVec3(0.0)(0.0)(1.0);
                var flatP = Three_Math_Vector.mkVec2(Three_Math_Vector.vecX(Three_Math_Vector.hasXVec3)(localPoint))(Three_Math_Vector.vecY(Three_Math_Vector.hasYVec3)(localPoint));
                var calcAngle = function (norm) {
                    return Math_Angle.acos(Three_Math_Vector.dot(Three_Math_Vector.vecVec3)(norm)(up));
                };
                var $0 = Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Function.flip(Algorithm_PointInPolygon.pointInPolygon)(flatP))(roofPoly);
                if ($0) {
                    return false;
                };
                return Math_Angle.degreeVal(calcAngle(Three_Core_Face3.normal(e.face))) < 60.0;
            };
        };
    };
};
module.exports = {
    couldBeRoof: couldBeRoof
};
